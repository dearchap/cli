// Code generated by running "go generate" in golang.org/x/text. DO NOT EDIT.

package translations

import (
	"golang.org/x/text/language"
	"golang.org/x/text/message"
	"golang.org/x/text/message/catalog"
)

type dictionary struct {
	index []uint32
	data  string
}

func (d *dictionary) Lookup(key string) (data string, ok bool) {
	p, ok := messageKeyToIndex[key]
	if !ok {
		return "", false
	}
	start, end := d.index[p], d.index[p+1]
	if start == end {
		return "", false
	}
	return d.data[start:end], true
}

func init() {
	dict := map[string]catalog.Dictionary{
		"en_GB": &dictionary{index: en_GBIndex, data: en_GBData},
		"en_US": &dictionary{index: en_USIndex, data: en_USData},
	}
	fallback := language.MustParse("en-US")
	cat, err := catalog.NewFromMap(dict, catalog.Fallback(fallback))
	if err != nil {
		panic(err)
	}
	message.DefaultCatalog = cat
}

var messageKeyToIndex = map[string]int{
	"%s %s\n\n":       0,
	"%v version %v\n": 3,
	"no shell provided for completion command. available shells are %+v": 1,
	"unknown shell %s, available shells are %+v":                         2,
}

var en_GBIndex = []uint32{ // 5 elements
	0x00000000, 0x00000012, 0x00000058, 0x00000089,
	0x000000a2,
} // Size: 44 bytes

const en_GBData string = "" + // Size: 162 bytes
	"\x04\x00\x02\x0a\x0a\x0c\x02%[1]s %[2]s\x02no shell provided for complet" +
	"ion command. available shells are %+[1]v\x02unknown shell %[1]s, availab" +
	"le shells are %+[2]v\x04\x00\x01\x0a\x14\x02%[1]v version %[2]v"

var en_USIndex = []uint32{ // 5 elements
	0x00000000, 0x00000012, 0x00000058, 0x00000089,
	0x000000a2,
} // Size: 44 bytes

const en_USData string = "" + // Size: 162 bytes
	"\x04\x00\x02\x0a\x0a\x0c\x02%[1]s %[2]s\x02no shell provided for complet" +
	"ion command. available shells are %+[1]v\x02unknown shell %[1]s, availab" +
	"le shells are %+[2]v\x04\x00\x01\x0a\x14\x02%[1]v version %[2]v"

	// Total table size 412 bytes (0KiB); checksum: 428FDDD9
